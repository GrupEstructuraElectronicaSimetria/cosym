#!/usr/bin/env python
from cosymlib import file_io
from cosymlib.molecule.geometry import Geometry
from cosymlib.shape import tools
from cosymlib.file_io.tools import add_extra_keywords, extract_geometries, header, footer, write_input_info
from cosymlib.file_io import read_generic_structure_file
from cosymlib.symmetry.tools import print_symmetry_labels
from cosymlib import Cosymlib
import argparse
import sys
import os


# positional arguments
parser = argparse.ArgumentParser(description='Shape')
parser.add_argument(type=str,
                    dest='input_file',
                    help='input file name(+extension)')
parser.add_argument(type=str,
                    dest="yaml_input",
                    nargs='?',
                    default=None,
                    help='Perform the calculations with the command file')
# Main options
parser.add_argument('-m', '--measure',
                    dest='measure',
                    default=None,
                    help='Shape measure of input structure with reference polyhedra')
parser.add_argument('-l', '--labels', action='store_true',
                    dest='labels',
                    default=False,
                    help='show the reference labels for a given structure')
parser.add_argument('-s', '--structure',
                    dest='structure',
                    action='store_true',
                    default=False,
                    help='return the closes input structure to the reference shape')
parser.add_argument('-o', '--output_name',
                    dest='output_name',
                    metavar='Filename',
                    default=None,
                    help='save in file name')
parser.add_argument('-c', '--central_atom',
                    dest='central_atom',
                    type=int,
                    default=0,
                    help='position of the central atom if exist')
parser.add_argument('-r', '--references',
                    dest='references',
                    action='store_true',
                    default=False,
                    help='return a file with the coordinates of reference polyhedra')
parser.add_argument('-info',
                    action='store_true',
                    default=False,
                    help='return information about the input geometries')
parser.add_argument('--custom_ref',
                    dest='custom_ref',
                    metavar='filename',
                    default=None,
                    help='take a given structure from the file and use it as reference')
parser.add_argument('--fix_permutation',
                    dest='fix_permutation',
                    action='store_true',
                    default=False,
                    help='use the given permutation to perform a calculation')

args = parser.parse_args()

common_output = open(str(args.output_name), 'w') if args.output_name is not None else sys.stdout
header(common_output)


if args.yaml_input:
    add_extra_keywords(args, args.yaml_input)

geometries = extract_geometries(read_generic_structure_file(args.input_file, read_multiple=True))

symobj = Cosymlib(geometries)

n_atoms = geometries[0].get_n_atoms()

if args.references:

    reference_structures = []
    for label in tools.get_structure_references(n_atoms):
        reference_structures.append(tools.get_test_structure(label, central_atom=args.central_atom))

    file_io.write_reference_structures_in_file_xyz(reference_structures, central_atom=args.central_atom)

if args.info:
    write_input_info(geometries, output=common_output)
    exit()

# Shape's commands
if args.labels:
    print(tools.get_shape_label_info(n_atoms, with_central_atom=args.central_atom))
    exit()

reference_polyhedron = []
if args.measure == 'custom':
    if args.custom_ref is not None:
        reference_polyhedron = file_io.read_generic_structure_file(args.custom_ref, read_multiple=True)
    else:
        raise Exception('Custom reference file not defined (use: --custom_ref filename)')

elif not reference_polyhedron:
    if args.measure == 'all':
        n_atoms = geometries[0].get_n_atoms()
        c = int(bool(args.central_atom))
        reference_polyhedron = tools.get_structure_references(n_atoms - c)
    else:
        reference_polyhedron = [args.measure]


if args.measure or args.custom_ref:
    symobj.write_shape_measure(reference_polyhedron,
                               central_atom=args.central_atom,
                               fix_permutation=args.fix_permutation,
                               output=common_output)

if args.structure:
    common_output.write("\nOriginal structures vs reference polyhedra\n")
    symobj.write_shape_structure(reference_polyhedron,
                                 central_atom=args.central_atom,
                                 fix_permutation=args.fix_permutation,
                                 output=common_output)

footer(common_output)
