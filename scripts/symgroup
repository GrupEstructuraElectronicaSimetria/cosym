#!/usr/bin/env python
from cosymlib.file_io.tools import add_extra_keywords, extract_geometries, header, footer, write_input_info
from cosymlib.file_io import read_generic_structure_file
from cosymlib.symmetry.tools import print_symmetry_labels
from cosymlib import Cosymlib
import argparse
import sys


parser = argparse.ArgumentParser(description='Symgroup')

# positional arguments
parser.add_argument(type=str,
                    dest='input_file',
                    help='input file name(+extension)')
parser.add_argument(type=str,
                    dest="yaml_input",
                    nargs='?', default=None,
                    help='Perform the calculations with the command file')
# Main options
parser.add_argument('-m', '--measure',
                    dest='measure',
                    metavar='SG',
                    default=False,
                    help='Calculate the SG symmetry measure for input structure')
parser.add_argument('-s', '--structure',
                    dest='structure',
                    action='store_true',
                    default=False,
                    help='returns the closest SG-symmetric structure to the reference one')
parser.add_argument('-l', '--labels',
                    dest='labels',
                    action='store_true',
                    default=False,
                    help='prints the symmetry labels (SG) for the groups that can be used')
parser.add_argument('-o', '--output',
                    dest='output_name',
                    metavar='filename',
                    default=None,
                    help='saves results in a file')
parser.add_argument('-c', '--central_atom',
                    action='store',
                    dest='central_atom',
                    metavar='N',
                    type=int,
                    default=0,
                    help='central atom is in position N in the input structure')
parser.add_argument('-info',
                    action='store_true',
                    default=False,
                    help='return information about the input geometries')

# Modifiers
parser.add_argument('--ignore_connectivity',
                    dest='ignore_connectivity',
                    action='store_true',
                    default=False,
                    help='ignore connectivity')
parser.add_argument('--ignore_atoms_labels',
                    dest='ignore_atoms_labels',
                    action='store_true',
                    default=False,
                    help='ignore atom labels for structures in the input file')
parser.add_argument('--connectivity_thresh',
                    dest='connectivity_thresh',
                    metavar='R',
                    default=1.1,
                    help='threshold to determine if atoms are connected (Angs)')
parser.add_argument('--center',
                    dest='center', metavar='R',
                    type=float,
                    default=None,
                    nargs=3,
                    help='Set the center for symmetry operations (Angs)')


args = parser.parse_args()

common_output = open(str(args.output_name), 'w') if args.output_name is not None else sys.stdout
header(common_output)


if args.yaml_input:
    add_extra_keywords(args, args.yaml_input)

geometries = extract_geometries(read_generic_structure_file(args.input_file, read_multiple=True), as_list=True)

for geometry in geometries:
    if args.ignore_atoms_labels:
        geometry.set_symbols('X' * geometry.get_n_atoms())
    if args.ignore_connectivity:
        geometry.set_connectivity(None)

symobj = Cosymlib(geometries)


if args.labels:
    print_symmetry_labels()
    exit()

if args.info:
    write_input_info(geometries, output=common_output)
    exit()

# Symgroup commands
if args.measure:
    symobj.print_geometric_measure(args.measure,
                                   central_atom=args.central_atom,
                                   center=args.center,
                                   connect_thresh=args.connectivity_thresh,
                                   output=common_output)

if args.structure:
    if args.output_name is None:
        print('\nClosest structure/s to reference')
        symobj.print_symgroup_structure(args.measure,
                                        central_atom=args.central_atom,
                                        center=args.center,
                                        connect_thresh=args.connectivity_thresh)
    else:
        symobj.print_symgroup_structure(args.measure,
                                        central_atom=args.central_atom,
                                        connect_thresh=args.connectivity_thresh,
                                        center=args.center,
                                        output=open(args.output_name + '_sym.xyz', 'w'))

footer(common_output)
