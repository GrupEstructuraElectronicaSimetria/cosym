#!/usr/bin/env python
from cosymlib.file_io import read_input_file, write_input_info, header, footer
from cosymlib.symmetry.tools import print_symmetry_labels
from cosymlib import Cosymlib
from cosymlib.molecule.geometry import Geometry
import argparse
import yaml
import sys


parser = argparse.ArgumentParser(description='Symgroup')

# positional arguments
parser.add_argument(type=str,
                    dest='input_file',
                    help='input file name(+extension)')
parser.add_argument(type=str,
                    dest="yaml_input",
                    nargs='?', default=None,
                    help='Perform the calculations with the command file')
# Main options
parser.add_argument('-m', '--measure',
                    dest='measure',
                    metavar='label',
                    default=False,
                    help='Symgroup measure of input structure with reference group')
parser.add_argument('-s', '--structure',
                    dest='structure',
                    action='store_true',
                    default=False,
                    help='return the closes input structure to the reference symmetry')
parser.add_argument('-l', '--labels',
                    dest='labels',
                    action='store_true',
                    default=False,
                    help='return the possible symmetry labels that can be used in symgroup')
parser.add_argument('-o', '--output',
                    dest='output_name',
                    metavar='filename',
                    default=None,
                    help='save in file name')
parser.add_argument('-c', '--central_atom',
                    action='store',
                    dest='central_atom',
                    metavar='N',
                    type=int,
                    default=0,
                    help='position of the central atom')
parser.add_argument('-info',
                    action='store_true',
                    default=False,
                    help='return information about the input geometries')

# Modifiers
parser.add_argument('--ignore_connectivity',
                    dest='ignore_connectivity',
                    action='store_true',
                    default=False,
                    help='ignore connectivity')
parser.add_argument('--ignore_atoms_labels',
                    dest='ignore_atoms_labels',
                    action='store_true',
                    default=False,
                    help='ignore atom labels from given structures')
parser.add_argument('--connectivity_thresh',
                    dest='connectivity_thresh',
                    metavar='R',
                    default=1.1,
                    help='connectivity threshold if not provided')
parser.add_argument('--center',
                    dest='center', metavar='R',
                    type=float,
                    default=None,
                    nargs=3,
                    help='Center for the symmetry operations')


args = parser.parse_args(sys.argv[1:])

common_output = open(str(args.output_name), 'w') if args.output_name is not None else sys.stdout
header(common_output)

if args.yaml_input:
    with open(args.yaml_input, 'r') as stream:
        input_parameters = yaml.load(stream, Loader=yaml.FullLoader)

    for key, value in input_parameters.items():
        if key.lower() in args:
            setattr(args, key.lower(), value)
        else:
            raise KeyError("Key {} is not valid".format(key))


def extract_geometries(structure_list):
    geometry_list = []
    for structure in structure_list:
        if isinstance(structure, Geometry):
            geometry_list.append(structure)
        else:
            geometry_list.append(structure.geometry)

    return geometry_list


geometries = extract_geometries(read_input_file(args.input_file, read_multiple=True))

for geometry in geometries:
    if args.ignore_atoms_labels:
        geometry._symbols = []
    if args.ignore_connectivity:
        geometry.set_connectivity(None)

symobj = Cosymlib(geometries)


if args.labels:
    print_symmetry_labels()
    exit()

if args.info:
    write_input_info(geometries, output=common_output)
    exit()

# Symgroup commands
if args.measure:
    symobj.write_symgroup_measure(args.measure,
                                  central_atom=args.central_atom,
                                  center=args.center,
                                  connect_thresh=args.connectivity_thresh,
                                  output=common_output)

if args.structure:
    if args.output_name is None:
        print('\nClosest structure/s to reference')
        symobj.write_symgroup_structure(args.measure,
                                        central_atom=args.central_atom,
                                        center=args.center,
                                        connect_thresh=args.connectivity_thresh)
    else:
        symobj.write_symgroup_structure(args.measure,
                                        central_atom=args.central_atom,
                                        connect_thresh=args.connectivity_thresh,
                                        center=args.center,
                                        output=open(args.output_name + '_sym.xyz', 'w'))

footer(common_output)

