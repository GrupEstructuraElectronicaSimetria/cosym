#!/usr/bin/env python
import argparse
import sys
import numpy as np
import yaml
from cosym import file_io
from cosym.cosym_api import Cosym
from cosym.shape import shape_tools


parser = argparse.ArgumentParser(description='Cosym ')
parser.add_argument(type=str, dest='input_file', help='input file name(+extension)')
parser.add_argument('-o', dest='output_name', default=None, help='customize output file name')
parser.add_argument(type=str, dest="yaml_input", nargs='?', default=None,
                    help='Perform the calculations with the command file')
parser.add_argument('-central_atom', action='store', dest='central_atom_position',
                    type=int, default=0, help='position of the central atom if exist')

# Shape input flags
group_shape = parser.add_argument_group('Shape')
group_shape.add_argument('-shape',
                         dest='shape_label',
                         action='store',
                         default=None,
                         help='Shape measure of input structure with reference polyhedra')
group_shape.add_argument('-custom_ref', action='store',
                         dest='custom_ref',
                         default=None,
                         help='take the given structure from the file and use it as reference')
group_shape.add_argument('-shape_map',
                         dest='shape_map',
                         action='store',
                         nargs=2,
                         default=False,
                         help='Calculates the path deviation function for the minimal '
                              'distortion interconversion path between two given polyhedra')
group_shape.add_argument('-shape_path',
                         dest='shape_path',
                         action='store_true',
                         default=False,
                         help='Calculates generalized coordinate from the path deviation function for a given path')


args = parser.parse_args(sys.argv[1:])

if args.yaml_input:
    with open(args.yaml_input, 'r') as stream:
        input_parameters = yaml.load(stream)

    for key, value in input_parameters.items():
        if key.lower() in args:
            setattr(args, key.lower(), value)
        else:
            raise KeyError("Key %s is not valid" % key)

reference_polyhedron = []
if args.input_file is not None:
    structures = file_io.read_input_file(args.input_file)
    symobj = Cosym(structures)

if args.custom_ref is not None:
    reference_polyhedron = file_io.read_input_file(args.custom_ref)
elif not reference_polyhedron:
    reference_polyhedron = [args.shape_label]


if args.shape_map:
    symobj.write_minimum_distortion_path_shape_2file(args.shape_map[0],
                                                     args.shape_map[1],
                                                     central_atom=args.central_atom_position,
                                                     show=True)
if args.shape_path:
    symobj.write_path_parameters_2file(args.shape_map[0],
                                       args.shape_map[1],
                                       central_atom=args.central_atom_position,
                                       output_name=args.output_name)